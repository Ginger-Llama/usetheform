{"version":3,"sources":["webpack:///../docs/TextArea.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Form","Submit","TextArea","useValidation","useAsyncValidation","name","value","reducers","nextValue","prevValue","replace","trim","undefined","test","status","validation","touched","error","Promise","resolve","reject","setTimeout","asyncStatus","asyncValidation","isMDXComponent"],"mappings":"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","file":"component---docs-text-area-mdx-f8141c87c80b9431bbf1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/iusehooks/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Form } from \"./helpers/Form\";\nimport { Submit } from \"./helpers/Submit\";\nimport { TextArea, useValidation, useAsyncValidation } from './../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"textarea\"\n    }}>{`TextArea`}</h1>\n    <p>{`It renders a `}<em parentName=\"p\">{`textarea`}</em>{` element: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3schools.com/tags/tag_textarea.asp\"\n      }}>{`W3schools Textarea`}</a>{` and accepts as props any html attribute listed at: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3schools.com/tags/tag_textarea.asp\"\n      }}>{`Html Textarea Attributes`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`name`}</inlineCode></strong>{`: string`}</p>\n    <p>{`A field's name in Usetheform state. `}<br />{`\nIf your TextArea is rendered within a `}<inlineCode parentName=\"p\">{`<Collection array />`}</inlineCode>{`, `}<strong parentName=\"p\">{`name`}</strong>{` is not allowed as prop.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`index`}</inlineCode></strong>{`: string`}</p>\n    <p>{`A field's index in array Collection. `}<br />{`\n`}<strong parentName=\"p\">{`index`}</strong>{` is only allowed If your TextArea is rendered within a `}<inlineCode parentName=\"p\">{`<Collection array /> `}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`value`}</inlineCode></strong>{`: string`}</p>\n    <p>{`Specifies the initial value of an `}<em parentName=\"p\">{`textarea`}</em>{` element.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`touched`}</inlineCode></strong>{`: boolean`}</p>\n    <p>{`A field that has been touched/visited. Default value `}<em parentName=\"p\">{`false`}</em>{`. `}</p>\n    <p>{`If `}<em parentName=\"p\">{`true`}</em>{` validation messages (sync and async) will be showing only when the event onBlur of the field is triggered by the user action.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`reducers`}</inlineCode></strong>{`: array | function`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`(nextValue, prevValue, formState) => nextValue\n`}</code></pre>\n    <p>{`An array whose values correspond to different reducing functions.\nReducers functions specify how the TextArea's value change.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`innerRef`}</inlineCode></strong>{`: object (a mutable ref object)`}</p>\n    <p>{`When you need to access the underlying DOM node created by TextArea (e.g. to call focus), you can use a ref to store a reference to the textarea dom node.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const ref = useRef(null)\n<TextArea innerRef={ref} name=\"textarea\" value=\"test\" />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { Form, TextArea } from 'usetheform'\n`}</code></pre>\n    <Playground __position={0} __code={'<Form>\\n  <TextArea name=\\\"textarea\\\" value=\\\"foo\\\" />\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      TextArea,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Form mdxType=\"Form\">\n    <TextArea name=\"textarea\" value=\"foo\" mdxType=\"TextArea\" />\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"reducers\"\n    }}>{`Reducers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { Form, TextArea } from 'usetheform'\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const noHtmlTags = (nextValue, prevValue) =>\\n    nextValue.replace(/(<([^>]+)>)/gi, \\'\\')\\n  const notNumber = (nextValue, prevValue) =>\\n    nextValue.replace(/[0-9]+/gi, \\'\\')\\n  return (\\n    <Form>\\n      <TextArea\\n        name=\\\"textareaReducer\\\"\\n        reducers={[noHtmlTags, notNumber]}\\n        value=\\\"foo\\\"\\n      />\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      TextArea,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const noHtmlTags = (nextValue, prevValue) => nextValue.replace(/(<([^>]+)>)/ig, \"\");\n\n        const notNumber = (nextValue, prevValue) => nextValue.replace(/[0-9]+/ig, \"\");\n\n        return <Form mdxType=\"Form\">\n        <TextArea name=\"textareaReducer\" reducers={[noHtmlTags, notNumber]} value=\"foo\" mdxType=\"TextArea\" />\n      </Form>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation---sync\"\n    }}>{`Validation - Sync`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { useValidation } from 'usetheform'\n`}</code></pre>\n    <Playground __position={2} __code={'() => {\\n  const notNumber = value =>\\n    !(value && !/^[A-Za-z ]+$/i.test(value))\\n      ? undefined\\n      : \\'Numbers not allowed\\'\\n  const required = value =>\\n    value && value.trim() !== \\'\\' ? undefined : \\'Required\\'\\n  const [status, validation] = useValidation([required, notNumber])\\n  return (\\n    <Form>\\n      <TextArea name=\\\"notEmpty\\\" touched {...validation} />\\n      {status.error && <label>{status.error}</label>}\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      TextArea,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const notNumber = value => !(value && !/^[A-Za-z ]+$/i.test(value)) ? undefined : \"Numbers not allowed\";\n\n        const required = value => value && value.trim() !== \"\" ? undefined : \"Required\";\n\n        const [status, validation] = useValidation([required, notNumber]);\n        return <Form mdxType=\"Form\">\n        <TextArea name=\"notEmpty\" touched {...validation} mdxType=\"TextArea\" />\n        {status.error && <label>{status.error}</label>}\n      </Form>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation---async\"\n    }}>{`Validation - Async`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { useAsyncValidation, useForm } from 'usetheform'\n\nconst Submit = () => {\n  const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type=\"submit\">\n      Submit\n    </button>\n  );\n};\n\n`}</code></pre>\n    <Playground __position={3} __code={'() => {\\n  const asyncTest = value =>\\n    new Promise((resolve, reject) => {\\n      // it could be an API call or any async operation\\n      setTimeout(() => {\\n        if (value === \\'foo\\') {\\n          reject(\\'text not allowed\\')\\n        } else {\\n          resolve(\\'Success\\')\\n        }\\n      }, 1000)\\n    })\\n  const [asyncStatus, asyncValidation] = useAsyncValidation(asyncTest)\\n  return (\\n    <Form>\\n      <TextArea name=\\\"text\\\" touched {...asyncValidation} />\\n      {asyncStatus.status === undefined && (\\n        <label>Async Check Not Started Yet</label>\\n      )}\\n      {asyncStatus.status === \\'asyncStart\\' && <label>Checking...</label>}\\n      {asyncStatus.status === \\'asyncError\\' && (\\n        <label>{asyncStatus.value}</label>\\n      )}\\n      {asyncStatus.status === \\'asyncSuccess\\' && (\\n        <label>{asyncStatus.value}</label>\\n      )}\\n      <br />\\n      <Submit />\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      TextArea,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const asyncTest = value => new Promise((resolve, reject) => {\n          // it could be an API call or any async operation\n          setTimeout(() => {\n            if (value === \"foo\") {\n              reject(\"text not allowed\");\n            } else {\n              resolve(\"Success\");\n            }\n          }, 1000);\n        });\n\n        const [asyncStatus, asyncValidation] = useAsyncValidation(asyncTest);\n        return <Form mdxType=\"Form\">\n        <TextArea name=\"text\" touched {...asyncValidation} mdxType=\"TextArea\" />\n        {asyncStatus.status === undefined && <label>Async Check Not Started Yet</label>}\n        {asyncStatus.status === \"asyncStart\" && <label>Checking...</label>}\n        {asyncStatus.status === \"asyncError\" && <label>{asyncStatus.value}</label>}\n        {asyncStatus.status === \"asyncSuccess\" && <label>{asyncStatus.value}</label>}\n        <br />\n        <Submit mdxType=\"Submit\" />\n      </Form>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}