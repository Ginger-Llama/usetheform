{"version":3,"sources":["webpack:///../docs/useField.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,mMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,qBAAG,0BAAYC,WAAW,KAAvB,6BAAH,+CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kDAIL,iBAAQ,CACN,GAAM,aADR,aAGA,qBAAG,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA1B,YACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,SAA1C,YACA,iBAAGA,WAAW,MAAd,qBAAyC,6BAAGA,WAAW,KAAQ,CAC3D,KAAQ,6DAD6B,yBAAzC,2BAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,SAA1C,YACA,iBAAGA,WAAW,MAAd,uCAA2D,uBAA3D,wCAC6B,0BAAYA,WAAW,KAAvB,wBAD7B,KACmG,sBAAQA,WAAW,KAAnB,QADnG,6BAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,UAA1C,YACA,iBAAGA,WAAW,MAAd,wCAA4D,uBAA5D,KACN,sBAAQA,WAAW,KAAnB,SADM,uDAC2F,0BAAYA,WAAW,KAAvB,yBAD3F,MAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,UAA1C,uDACA,iBAAGA,WAAW,MAAd,qCAAyD,kBAAIA,WAAW,KAAf,SAAzD,cAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA1C,aACA,iBAAGA,WAAW,MAAd,qBAAyC,kBAAIA,WAAW,KAAf,SAAzC,+FAA0K,kBAAIA,WAAW,KAAf,SAA1K,MAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,aAA1C,aACA,iBAAGA,WAAW,MAAd,yHAA6I,kBAAIA,WAAW,KAAf,SAA7I,MAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA1C,aACA,iBAAGA,WAAW,MAAd,wDAA4E,kBAAIA,WAAW,KAAf,SAA5E,MACA,iBAAGA,WAAW,MAAd,MAA0B,kBAAIA,WAAW,KAAf,QAA1B,mIAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,aAA1C,sBACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,CAC5C,UAAa,gBADI,qDAIrB,iBAAGA,WAAW,MAAd,iIAIJ,iBAAQ,CACN,GAAM,WADR,WAGA,yBAAQ,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,oBAA/B,aACA,+EACA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yLAWL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8aAiBL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uaAeL,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+lB,iMA4BTJ,EAAWK,gBAAiB","file":"component---docs-use-field-mdx-d1f39d1a2a09bbdf07ae.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/iusehooks/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usefield\"\n    }}>{`useField`}</h1>\n    <p><inlineCode parentName=\"p\">{`useField(options: Object)`}</inlineCode>{` allows to build a custom input primitives.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  const fieldInputProps = useField(options)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h2>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options`}</inlineCode></strong>{`: object`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`type`}</inlineCode></strong>{`: string`}</p>\n        <p parentName=\"li\">{`Strings accepted: `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.w3schools.com/html/html_form_input_types.asp\"\n          }}>{`W3schools Input Types`}</a>{` - \"select\" - \"custom\"`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`name`}</inlineCode></strong>{`: string`}</p>\n        <p parentName=\"li\">{`A field's name in Usetheform state. `}<br />{`\nIf your Field is rendered within a `}<inlineCode parentName=\"p\">{`<Collection array />`}</inlineCode>{`, `}<strong parentName=\"p\">{`name`}</strong>{` is not allowed as prop.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`index`}</inlineCode></strong>{`: string`}</p>\n        <p parentName=\"li\">{`A field's index in array Collection. `}<br />{`\n`}<strong parentName=\"p\">{`index`}</strong>{` is only allowed If your Field is rendered within a `}<inlineCode parentName=\"p\">{`<Collection array /> `}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`value`}</inlineCode></strong>{`: string | number | object (only for type=\"custom\")`}</p>\n        <p parentName=\"li\">{`Specifies the initial value of an `}<em parentName=\"p\">{`input`}</em>{` element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`checked`}</inlineCode></strong>{`: boolean`}</p>\n        <p parentName=\"li\">{`Specifies that an `}<em parentName=\"p\">{`input`}</em>{` element should be pre-selected or not (for type=\"checkbox\" or type=\"radio\"). Default value `}<em parentName=\"p\">{`false`}</em>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`multiple`}</inlineCode></strong>{`: boolean`}</p>\n        <p parentName=\"li\">{`Valid only for type=\"select\", when present, it specifies that multiple options can be selected at once. Default value `}<em parentName=\"p\">{`false`}</em>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`touched`}</inlineCode></strong>{`: boolean`}</p>\n        <p parentName=\"li\">{`A field that has been touched/visited. Default value `}<em parentName=\"p\">{`false`}</em>{`. `}</p>\n        <p parentName=\"li\">{`If `}<em parentName=\"p\">{`true`}</em>{` validation messages (sync and async) will be showing only when the event onBlur of the field is triggered by the user action.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`reducers`}</inlineCode></strong>{`: array | function`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`(nextValue, prevValue, formState) => nextValue\n`}</code></pre>\n        <p parentName=\"li\">{`An array whose values correspond to different reducing functions.\nReducers functions specify how the Input's value change.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h2>\n    <p>{`(`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`FieldInputProps`}</inlineCode></strong>{`): object`}</p>\n    <p>{`An object that holds all the attributes of your field.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CustomInput = props => {\n  const fieldInputProps = useField({\n    type: \"text\",\n    name: \"simple\",\n    value: \"foo\"\n  });\n  return <input {...fieldInputProps} />;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CustomField = ({ name, initialValue = { a: \"2\" } }) => {\n  const { value, setValue } = useField({ type: \"custom\", name, value: initialValue });\n  const onChange = () => setValue(prev => ({ ...prev, a: \"1\" }));\n  return (\n    <div>\n      <pre>\n        <code>{JSON.stringify(value)}</code>\n      </pre>\n      <button type=\"button\" onClick={onChange}>\n        Change Value\n      </button>\n    </div>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reducers\"\n    }}>{`Reducers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const maxNumber10 = (nextValue, prevValue) => nextValue > 10 ? prevValue : nextValue;\nconst minNumber1 = (nextValue, prevValue) => nextValue <= 1 ? prevValue : nextValue;\n\nconst CustomInput = props => {\n  const fieldInputProps = useField({\n      type: \"number\",\n      name: \"numberWithReducer\",\n      reducers: [minNumber1, maxNumber10],\n      value: \"1\"\n    });\n  return <input {...fieldInputProps} />;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const email = value =>\n    !(value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(value))\n      ? undefined\n      : \"Mail not Valid\";\nconst required = value => (value && value.trim() !== \"\" ? undefined : \"Required\");\n\nconst CustomInput = props => {\n  const [status, validation] = useValidation([required, email]);\n  const fieldInputProps = useField({\n      type: \"text\",\n      touched: true,\n      name: \"email\",\n      ...validation\n  });\n  return (\n    <div>\n      <input {...fieldInputProps} />\n      {status.error && <label>{status.error}</label>}\n    </div>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}